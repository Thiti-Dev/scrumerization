//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TopicVotes = newTopicVotesTable("public", "topic_votes", "")

type topicVotesTable struct {
	postgres.Table

	// Columns
	TopicID          postgres.ColumnString
	UserID           postgres.ColumnString
	Voted            postgres.ColumnInteger
	VotedDescription postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz
	UpdatedAt        postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TopicVotesTable struct {
	topicVotesTable

	EXCLUDED topicVotesTable
}

// AS creates new TopicVotesTable with assigned alias
func (a TopicVotesTable) AS(alias string) *TopicVotesTable {
	return newTopicVotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TopicVotesTable with assigned schema name
func (a TopicVotesTable) FromSchema(schemaName string) *TopicVotesTable {
	return newTopicVotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TopicVotesTable with assigned table prefix
func (a TopicVotesTable) WithPrefix(prefix string) *TopicVotesTable {
	return newTopicVotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TopicVotesTable with assigned table suffix
func (a TopicVotesTable) WithSuffix(suffix string) *TopicVotesTable {
	return newTopicVotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTopicVotesTable(schemaName, tableName, alias string) *TopicVotesTable {
	return &TopicVotesTable{
		topicVotesTable: newTopicVotesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newTopicVotesTableImpl("", "excluded", ""),
	}
}

func newTopicVotesTableImpl(schemaName, tableName, alias string) topicVotesTable {
	var (
		TopicIDColumn          = postgres.StringColumn("topic_id")
		UserIDColumn           = postgres.StringColumn("user_id")
		VotedColumn            = postgres.IntegerColumn("voted")
		VotedDescriptionColumn = postgres.StringColumn("voted_description")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn        = postgres.TimestampzColumn("updated_at")
		allColumns             = postgres.ColumnList{TopicIDColumn, UserIDColumn, VotedColumn, VotedDescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns         = postgres.ColumnList{TopicIDColumn, UserIDColumn, VotedColumn, VotedDescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return topicVotesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TopicID:          TopicIDColumn,
		UserID:           UserIDColumn,
		Voted:            VotedColumn,
		VotedDescription: VotedDescriptionColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
