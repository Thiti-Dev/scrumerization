//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Topics = newTopicsTable("public", "topics", "")

type topicsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	RoomID    postgres.ColumnString
	Name      postgres.ColumnString
	AvgScore  postgres.ColumnFloat
	IsActive  postgres.ColumnBool
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TopicsTable struct {
	topicsTable

	EXCLUDED topicsTable
}

// AS creates new TopicsTable with assigned alias
func (a TopicsTable) AS(alias string) *TopicsTable {
	return newTopicsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TopicsTable with assigned schema name
func (a TopicsTable) FromSchema(schemaName string) *TopicsTable {
	return newTopicsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TopicsTable with assigned table prefix
func (a TopicsTable) WithPrefix(prefix string) *TopicsTable {
	return newTopicsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TopicsTable with assigned table suffix
func (a TopicsTable) WithSuffix(suffix string) *TopicsTable {
	return newTopicsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTopicsTable(schemaName, tableName, alias string) *TopicsTable {
	return &TopicsTable{
		topicsTable: newTopicsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newTopicsTableImpl("", "excluded", ""),
	}
}

func newTopicsTableImpl(schemaName, tableName, alias string) topicsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		RoomIDColumn    = postgres.StringColumn("room_id")
		NameColumn      = postgres.StringColumn("name")
		AvgScoreColumn  = postgres.FloatColumn("avg_score")
		IsActiveColumn  = postgres.BoolColumn("is_active")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, RoomIDColumn, NameColumn, AvgScoreColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{RoomIDColumn, NameColumn, AvgScoreColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return topicsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		RoomID:    RoomIDColumn,
		Name:      NameColumn,
		AvgScore:  AvgScoreColumn,
		IsActive:  IsActiveColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
