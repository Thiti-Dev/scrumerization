#/* --------------------------------- Models --------------------------------- */
type PaginatedRoomResult{
    data: [Room!]!
    totalCount: Int!
    count: Int!
}

type Room{
    id: UUID!
    creator_id: UUID!
    room_name: String
    password: String
    is_active: Boolean!
    createdAt: Time!
    updatedAt: Time!
    creator: User
}

type OnGoingTopic{
  id: UUID!
  name: String!
}

type RoomState{
  clients: [UUID!]!
  active: Boolean!
  onGoingTopic: OnGoingTopic

}

#/* -------------------------------------------------------------------------- */


#/* ---------------------------------- INPUT --------------------------------- */
input RoomWhereClause {
  id: UUID
  room_name: String
  creator_id: UUID
}

input RoomCreationInput {
  name: String
  password: String
}
#/* -------------------------------------------------------------------------- */

#/* -------------------------------- Response -------------------------------- */
#/* -------------------------------------------------------------------------- */

extend type Query {
  rooms(where: RoomWhereClause,paginate: PaginationInput): PaginatedRoomResult! @requiredMember(role: USER)
}

extend type Mutation {
  createRoom(input: RoomCreationInput!): Room! @requiredMember(role: USER)
}

extend type Subscription {
  connectToRoom(roomID: UUID!): RoomState!  
}