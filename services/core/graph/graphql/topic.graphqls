#/* --------------------------------- Models --------------------------------- */
type Topic{
    id: UUID!
    roomID: UUID!
    name: String!
    avgScore: Float
    isActive: Boolean!
    createdAt: Time!
    updatedAt: Time!
}

type TopicVote{
    topicID: UUID!
    userID: UUID!
    voted: Int!
    votedDesc: String
    createdAt: Time!
    updatedAt: Time!
    User: User!
}

#/* -------------------------------------------------------------------------- */


#/* ---------------------------------- INPUT --------------------------------- */
input CreateTopicInput{
    roomID: UUID!
    name: String!
}
input CreateTopicVoteInput{
    topicID: UUID!
    voted: Int!
    votedDesc: String
}
input TopicVoteQueryWhereClause{
    topicID: UUID
}
#/* -------------------------------------------------------------------------- */

#/* -------------------------------- Response -------------------------------- */

#/* -------------------------------------------------------------------------- */

extend type Query {
    topics(roomID: UUID!,password: String): [Topic!]! @requiredMember(role: USER)# View topics in specific room
    topicVotes(where: TopicVoteQueryWhereClause): [TopicVote!]! @requiredMember(role: USER)
}

extend type Mutation {
    createTopic(input: CreateTopicInput): Topic! @requiredMember(role: USER)
    createTopicVote(input: CreateTopicVoteInput): TopicVote! @requiredMember(role: USER)
}