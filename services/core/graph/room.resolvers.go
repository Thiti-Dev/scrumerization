package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Thiti-Dev/scrumerization-core-service/graph/model"
)

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context, where *model.RoomWhereClause) ([]*model.Room, error) {
	populateUser := false

	_ = graphql.GetOperationContext(ctx)
	fields := graphql.CollectFieldsCtx(ctx, nil)
	for _, field := range fields {
		if field.Name == "creator" {
			populateUser = true
			break
		}
	}
	rooms, err := r.RoomRepository.FindAll(populateUser, where)
	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	var res []*model.Room
	for _, room := range rooms {
		res = append(res, &model.Room{
			ID:        room.ID,
			CreatorID: room.CreatorID,
			RoomName:  room.RoomName,
			Password:  room.Password,
			IsActive:  room.IsActive,
			CreatedAt: room.CreatedAt,
			UpdatedAt: room.UpdatedAt,
			Creator: &model.User{
				ID:        room.Creator.ID,
				Username:  room.Creator.Username,
				Name:      room.Creator.Name,
				CreatedAt: room.Creator.CreatedAt,
				UpdatedAt: room.Creator.UpdatedAt,
			},
		})
	}

	return res, nil
}
