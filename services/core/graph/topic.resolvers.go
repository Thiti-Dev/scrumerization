package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/Thiti-Dev/scrumerization-core-service/graph/model"
	context_type "github.com/Thiti-Dev/scrumerization-core-service/internal/domain/context"
	"github.com/Thiti-Dev/scrumerization-core-service/pkg/tokenizer"
)

// CreateTopic is the resolver for the createTopic field.
func (r *mutationResolver) CreateTopic(ctx context.Context, input *model.CreateTopicInput) (*model.Topic, error) {
	userPayload := ctx.Value(context_type.UserDataCtxKey).(*tokenizer.Payload)
	room, err := r.RoomRepository.FindRoomByID(input.RoomID)
	if err != nil {
		return nil, err
	}

	if room == nil {
		return nil, fmt.Errorf("room with id:\"%v\" doesn't exist", input.RoomID)
	}

	if room.CreatorID != userPayload.UUID {
		return nil, fmt.Errorf("requires room owner to create topic")
	}

	topic, err := r.TopicRepository.CreateTopic(input)
	if err != nil {
		return nil, err
	}

	// Broadcasting to room [async]
	// Set the current Topic
	go func() {
		room := r.RoomHub.MustGetRoomFromRoomID(input.RoomID)
		room.SetCurrentTopic(topic.ID, topic.Name)
	}()

	return &model.Topic{
		ID:        topic.ID,
		RoomID:    topic.RoomID,
		Name:      topic.Name,
		AvgScore:  topic.AvgScore,
		IsActive:  topic.IsActive,
		CreatedAt: topic.CreatedAt,
		UpdatedAt: topic.UpdatedAt,
	}, nil
}
